# Do not edit this file directly. Use a ‘docker-compose.override.yaml’ file if you can.
# Refer to `docker-compose.override.yaml.example’ for some sample configurations.

services:
  api:
    container_name: LibreChat
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      mongodb:
        condition: service_healthy
      rag_api:
        condition: service_healthy
    build:
      context: ${LIBRECHAT_PATH}
      dockerfile: Dockerfile
    restart: always
    user: "${UID}:${GID}"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - HOST=0.0.0.0
      - BRANCH=${BRANCH}
      - MONGO_URI=mongodb://mongodb:27017/LibreChat
      - MEILI_HOST=http://meilisearch:7700
      - RAG_API_URL=${RAG_API_URL}
    volumes:
      - type: bind
        source: ./.env
        target: /app/.env
      - ./images:/app/client/public/images
      - ./logs:/app/api/logs
    env_file:
      - .env  
    networks:
      - bridge_network

  meilisearch:
    container_name: chat-meilisearch
    image: getmeili/meilisearch:v1.7.3
    restart: always
    user: "${UID}:${GID}"
    environment:
      - MEILI_HOST=http://meilisearch:7700
      - MEILI_NO_ANALYTICS=true
    volumes:
      - ./meili_data_v1.7:/meili_data
    ports:
      - "7700:7700"
    networks:
      - bridge_network

  qdrant:
    build:
      context: .
      dockerfile: DockerFileQdrant
    #image: qdrant/qdrant:latest
    restart: always
    container_name: qdrant
    ports:
      - 6333:6333
      - 6334:6334
    expose:
      - 6333
      - 6334
      - 6335
    configs:
      - source: qdrant_config
        target: /qdrant/config/production.yaml
    volumes:
      - qdrant_data:/qdrant/storage 
    networks:
      - bridge_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/cluster"]
      interval: 30s
      timeout: 10s
      retries: 5

  rag_api:
    container_name: rag_api
    build:
      context: ${RAG_API_LOCAL}
      dockerfile: Dockerfile
    restart: always
    depends_on:
      qdrant:
        condition: service_healthy
    ports:
      - "5000:5000"
    networks:
      - bridge_network
    environment:
      QDRANT_URL: http://qdrant:6333
      OLLAMA_BASE_URL: http://ollama:11434
    healthcheck:
      test: ["CMD", "curl", "-f", "http://rag_api:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  ollama:
    build:
      context: .
      dockerfile: DockerFileOllama
    # image: ollama/ollama:latest
    container_name: ollama
    hostname: ollama
    networks:
      - bridge_network
    volumes:
      - ./ollama-local:/root/.ollama
  
  mongodb:
    container_name: chat-mongodb
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    networks:
      - bridge_network
    user: "${UID}:${GID}"
    volumes:
      - ./data-node:/data/db
    command: mongod --noauth
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "'db.runCommand(\"ping\").ok'" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

configs:
  qdrant_config:
    content: |
      log_level: INFO

volumes:
  qdrant_data: 

networks:
  bridge_network:
    driver: bridge
    name: bridge_network  # Explicitly set the network name
